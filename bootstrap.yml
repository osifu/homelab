---
- name: Bootstrap hosts for Ansible + MicroK8s
  hosts: microk8s_nodes
  gather_facts: no
  become: yes
  vars:
    ansible_new_user: ansible
    ansible_ssh_key: "{{ lookup('file', '~/.ssh/id_ed25519.pub') }}"   
  tasks:
    - name: Ensure Python is installed
      raw: test -e /usr/bin/python3 || (apt update && apt install -y python3 python3-apt)
      changed_when: false

    - name: Check if ansible user exists
      command: id -u {{ ansible_new_user }}
      register: user_check
      ignore_errors: yes
      changed_when: false

    - name: Create ansible user if missing
      user:
        name: "{{ ansible_new_user }}"
        groups: sudo
        append: yes
        shell: /bin/bash
        create_home: yes
      when: user_check.rc != 0

    - name: Check if authorized_keys already contains our key
      command: grep -F "{{ ansible_ssh_key }}" /home/{{ ansible_new_user }}/.ssh/authorized_keys
      register: key_check
      ignore_errors: yes
      changed_when: false

    - name: Set authorized key for ansible user if not present
      authorized_key:
        user: "{{ ansible_new_user }}"
        state: present
        key: "{{ ansible_ssh_key }}"
      when: key_check.rc != 0

    - name: Ensure sudoers file for ansible user is configured
      lineinfile:
        dest: /etc/sudoers.d/ansible
        state: present
        create: yes
        mode: '0440'
        line: "{{ ansible_new_user }} ALL=(ALL) NOPASSWD:ALL"

    - name: Check if required packages are installed
      shell: dpkg -l | grep -E 'snapd|conntrack|iptables|socat'
      register: pkg_check
      ignore_errors: yes
      changed_when: false

    - name: Install required packages only if missing
      apt:
        name:
          - snapd
          - curl
          - ssh
          - sudo
          - conntrack
          - iptables
          - socat
        state: present
        update_cache: yes
      when: pkg_check.rc != 0

    - name: Enable snapd only if disabled
      systemd:
        name: snapd
        enabled: yes
        state: started

    # --- Raspberry Pi specific ---
    - name: Check if host is a Raspberry Pi
      command: uname -m
      register: arch_check
      changed_when: false

    - name: Check if cgroup params already present
      command: grep -q "cgroup_enable=memory" /boot/firmware/cmdline.txt
      register: cgroup_check
      ignore_errors: yes
      changed_when: false
      when: "'arm' in arch_check.stdout"

    - name: Add cgroup parameters only if missing
      lineinfile:
        path: /boot/firmware/cmdline.txt
        regexp: '(^.*)$'
        line: '\1 cgroup_enable=memory cgroup_memory=1'
        backrefs: yes
      when:
        - "'arm' in arch_check.stdout"
        - cgroup_check.rc != 0
      notify: Reboot Pi

    - name: Test connectivity after bootstrap
      ping:

  handlers:
    - name: Reboot Pi
      reboot:
        msg: "Rebooting Raspberry Pi to apply cgroup settings"
        connect_timeout: 30
        reboot_timeout: 600
        pre_reboot_delay: 5
        post_reboot_delay: 10
